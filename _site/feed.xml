<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-06-21T16:52:45+08:00</updated><id>http://localhost:4000/</id><title type="html">Holybasil</title><subtitle>Blog</subtitle><author><name>Misty</name></author><entry><title type="html">grid布局</title><link href="http://localhost:4000/code/2018/06/19/grid.html" rel="alternate" type="text/html" title="grid布局" /><published>2018-06-19T14:57:06+08:00</published><updated>2018-06-19T14:57:06+08:00</updated><id>http://localhost:4000/code/2018/06/19/grid</id><content type="html" xml:base="http://localhost:4000/code/2018/06/19/grid.html">&lt;h1 id=&quot;grid-布局的属性讲解及案例实现&quot;&gt;grid 布局的属性讲解及案例实现&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;基本 DOM 结构&lt;/p&gt;

&lt;p&gt;```html {.line-numbers}&lt;/p&gt;
&lt;div class=&quot;container&quot;&gt;
  &lt;div class=&quot;one&quot;&gt;one&lt;/div&gt;
  &lt;div class=&quot;two&quot;&gt;two&lt;/div&gt;
  &lt;div class=&quot;three&quot;&gt;three&lt;/div&gt;
  &lt;div class=&quot;four&quot;&gt;four&lt;/div&gt;
  &lt;div class=&quot;five&quot;&gt;five&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
## 属性分析

- &amp;lt;font color=&quot;#FF9300&quot;&amp;gt;grid&amp;lt;/font&amp;gt;  
  包括 grid-template-rows/grid-template-columns/grid-template-areas
  - &amp;lt;font color=&quot;#FF9300&quot;&amp;gt;grid-template-rows&amp;lt;/font&amp;gt; 定义 container 的行
  - &amp;lt;font color=&quot;#FF9300&quot;&amp;gt;grid-template-columns&amp;lt;/font&amp;gt; 定义 container 的列
  - &amp;lt;font color=&quot;#FF9300&quot;&amp;gt;grid-template-areas&amp;lt;/font&amp;gt; 用字符串命名来进行布局
    ```css {.line-numbers}
    .container {
      display: grid;
      width: 400px;
      grid-template-areas:
        &quot;one one&quot;
        &quot;two three&quot;
        &quot;four five&quot;;
    }
    .one {
      grid-area: one;
    }
    .two {
      grid-area: two;
    }
    .three {
      grid-area: three;
    }
    .four {
      grid-area: four;
    }
    .five {
      grid-area: five;
    }
    ```
    会形成以下布局：  
    ![](/assets/images/posts/grid/grid-1.png)

* &amp;lt;font color=&quot;#FF9300&quot;&amp;gt;grid-gap&amp;lt;/font&amp;gt;
  定义子元素的间隔 （包括 grid-row-gap 和 grid-column-gap）
  - &amp;lt;font color=&quot;#FF9300&quot;&amp;gt;grid-row-gap&amp;lt;/font&amp;gt; 定义子元素行之间的间距
  - &amp;lt;font color=&quot;#FF9300&quot;&amp;gt;grid-column-gap&amp;lt;/font&amp;gt; 定义子元素列之间的间距
* &amp;lt;font color=&quot;#FF9300&quot;&amp;gt;grid-auto-flow&amp;lt;/font&amp;gt;
  通过控制自动布局算法的运作原理，精确指定自动布局的元素在网格中的排列方式  
  以下用例子分析
  ```scss {.line-numbers}
  .container {
    display: grid;
    width: 400px;
    grid-auto-flow: &amp;lt;value&amp;gt;;
    grid-template-columns: repeat(3, 1fr);
    grid-template-rows: repeat(3, min-content);
    div {
      border: 1px solid rgba(225, 225, 225, 0.8);
    }
    .one {
      grid-column: 2 span; // 这里表示占据两列
    }
    .two {
      grid-column: 2 span;
    }
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;如果&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;value&amp;gt;&lt;/code&gt;为&lt;code class=&quot;highlighter-rouge&quot;&gt;row&lt;/code&gt;&lt;br /&gt;
  子元素优先按行排列，一行排不下再换行。&lt;br /&gt;
  &lt;img src=&quot;/assets/images/posts/grid/grid-2-1.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
  如果&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;value&amp;gt;&lt;/code&gt;为&lt;code class=&quot;highlighter-rouge&quot;&gt;column&lt;/code&gt;&lt;br /&gt;
  子元素优先按列排列，注意 four 的位置，当第一列排不下的了之后，再选择按行排列。&lt;br /&gt;
  &lt;img src=&quot;/assets/images/posts/grid/grid-2-2.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
  如果&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;value&amp;gt;&lt;/code&gt;为&lt;code class=&quot;highlighter-rouge&quot;&gt;dense&lt;/code&gt;&lt;br /&gt;
  尽可能的紧凑排列（子元素之间出现空隙尽可能的小，或者说尽量让空隙出现在右下角）&lt;br /&gt;
  &lt;img src=&quot;/assets/images/posts/grid/grid-2-3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;font color=&quot;#FF9300&quot;&gt;grid-auto-rows&lt;/font&gt;
    &lt;p&gt;定义没有给定高度的 row 的高度（即 子元素没有设置 height，父元素的 grid-template-rows 也没有明确给出 row 的高度）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;font color=&quot;#FF9300&quot;&gt;grid-auto-columns&lt;/font&gt;
    &lt;p&gt;定义没有给定宽度的 column 的宽度（同上）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;font color=&quot;#FF9300&quot;&gt;grid-row&lt;/font&gt;
    &lt;p&gt;定义在子元素上，表示子元素的行的起止位置。&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;grid-row-start&lt;/li&gt;
      &lt;li&gt;grid-row-end&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;font color=&quot;#FF9300&quot;&gt;grid-column&lt;/font&gt;
    &lt;p&gt;定义在子元素上，表示子元素的列的起止位置。&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;grid-column-start&lt;/li&gt;
      &lt;li&gt;grid-column-end
以下是一个 3 列的网格， 每条网格线（列）的位置已经用数字标好。&lt;br /&gt;
为了使子元素占据右边两列， 可以设置：&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;grid-column: 2 / 4&lt;/code&gt; 表示子元素列宽是占据 &lt;strong&gt;line 2&lt;/strong&gt; 到 &lt;strong&gt;line 4&lt;/strong&gt; 中间的位置。&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;grid-column: 2 / span 2&lt;/code&gt; 表示子元素是占据 从 &lt;strong&gt;line 2&lt;/strong&gt; 开始&lt;strong&gt;2&lt;/strong&gt;个列款宽的位置。&lt;br /&gt;
&lt;img src=&quot;/assets/images/posts/grid/grid-3.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;通过  设置父元素的 &lt;strong&gt;justify-items&lt;/strong&gt; 和 &lt;strong&gt;align-items&lt;/strong&gt;或者子元素的 &lt;strong&gt;justify-self&lt;/strong&gt; 和 &lt;strong&gt;align-self&lt;/strong&gt; 可以设置网格中元素的位置&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;一些属性值&quot;&gt;一些属性值&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;font color=&quot;#FF9300&quot;&gt;repeat&lt;/font&gt;
    &lt;p&gt;简化网格行列的定义&lt;br /&gt;
比如 &lt;code class=&quot;highlighter-rouge&quot;&gt;grid-template-columns: repeat(2, 50px 1fr) 100px;&lt;/code&gt; 等于 &lt;code class=&quot;highlighter-rouge&quot;&gt;grid-template-columns: 50px 1fr 50px 1fr 100px;&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;font color=&quot;#FF9300&quot;&gt;fit-content&lt;/font&gt;
    &lt;p&gt;举个例子&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;grid-template-columns: fit-content(300px) fit-content(300px) 1fr;&lt;/code&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/posts/grid/grid-4-1.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
 左边部分以及中间部分，因为内容区宽占不到 300px， 所以左边区的宽度以内容区为准，中间内容区的宽度会大于 300px,此时受 300px 的限制，宽为 300px，右边 1fr 占据剩余所有空间。（有点类似于 max-width）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;font color=&quot;#FF9300&quot;&gt;min-content&lt;/font&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;grid-template-columns: min-content minmax(200px, 1fr) 350px;&lt;/code&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/posts/grid/grid-4-2.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
取内容区最小宽度值的最大值，典型的例子就是以上，英文单词是默认不换行的，所以取最长的一个单词 brightest 所占据的宽度为此 div 的宽度。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;font color=&quot;#FF9300&quot;&gt;fr&lt;/font&gt;
    &lt;p&gt;显示定义 size 的子元素占据父元素的空间后，&lt;strong&gt;剩余的  空间&lt;/strong&gt;留给被  给予 fr 值的子元素。&lt;br /&gt;
那么对于只有一个剩余的子元素来说，size 定义为 1fr 或者 2fr 没有没什么区别，都是占据剩余的所有空间。&lt;br /&gt;
而对于两个或两个以上的子元素，size 按照 fr 前面的数字，等比分割剩余的空间。&lt;br /&gt;
同 flex 布局中的 &lt;code class=&quot;highlighter-rouge&quot;&gt;flex: &amp;lt;number&amp;gt;&lt;/code&gt; 类比&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;案例实现&quot;&gt;案例实现&lt;/h2&gt;

&lt;p&gt;TODO&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;css {.line-numbers}
&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout&quot;&gt;CSS_Grid_Layout&lt;/a&gt;&lt;/p&gt;</content><author><name>Misty</name></author><category term="css" /><summary type="html">grid 布局的属性讲解及案例实现</summary></entry></feed>